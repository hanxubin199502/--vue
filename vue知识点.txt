1.对于新手首先从页面的渲染开始说起，如何将动态数据渲染到页面中，如何绑定数据 如何遍历数组 vue指
令的使用等等

首先实现一个列表的遍历，数据为动态数据（模拟的数据完全遵循接口返回数据渲染）

<template>
   <div class="orderlist" v-for='item in orderlist'>  //说明：使用v-for进行遍历，orderlist可为数组也可为对象
                                                              这个需要到时候调接口的时候看你们是怎么定的，注意
                                                              这里的orderlist必须在return中定义，目前写的是模拟数据
       <div class="ordertext">{{item.title}}</div>    //说明：这里就是需要渲染的地方，title是在return中定义的参数
                                                              这个也是需要后期和后端定的可为多个值      
   </div>
</template>
<script>
   export default{
       name:'app'，
       data(){
          return{  //retyrn函数中放的是需要返回的值
            orderlist:[   
                {
                   title:'你好'
                 },
                 {
                   title:'在吗'
                 }
             ]
          }
       }
    }
</script>
<style scoped>
  .orderlist{
     width:100%;
     height:1.5rem;
     border:1px solid red;
   }
   .ordertext{
     font-size: .4rem;
     color:#000;
   }
</style>
2.前端中最常的的指令使用方法及举例
a.v-for 用于遍历 例子：遍历1-10的所有数字 <div v-for='n in 10'>{{n}}</div>只需要这么一行代码就可以解决
b.v-if 用于条件渲染，主要是通过dom元素来操作元素的显示与否，一般是根据接口中返回的一个字段进行判断 成立就显示 不成立就隐藏
c.v-show 用于条件渲染，但是和v-if是有根本性的区别的，v-show是通过控制元素的display属性让元素的显示与否
d.v-bind 用于绑定元素属性 比如v-bing:class绑定class的一个属性值，可缩写为:class，后期一般都进行缩写
e.v-on 用于绑定一些事件 比如v-on:click绑定点击事件 可缩写为@click 后期一般都进行缩写
f.v-model用于双向绑定数据 在表单input textarea select中实现双向数据绑定，主要是监听用户输入的内容并更新数据，比如<input v-model='msg'>
</input>   <div>绑定的内容是：{{msg}}</div> 当输入框中的内容变化时，div中的值随之变化  这就是v-model的双向数据绑定
实现一个选择框单选的例子
<template>
  <div id="example-5">
      <select v-model="selected">
        <option disabled value="">请选择</option>
        <option>A</option>
        <option>B</option>
        <option>C</option>
      </select>
  <span>Selected: {{ selected }}</span>
</div>
</template>
<script>
   export default{
      name:'example-5',
      data(){
         return{
            selected: ''
         }
      }
   }
</script>
说明：在实现选择框单选的时候点击下拉列表中的那个在span中显示那个具有唯一性

实现一个v-for渲染的动态选项
<template>
  <select v-model="selected">
      <option v-for="option in options" v-bind:value="option.value">
        {{ option.text }}
      </option>
  </select>
  <span>Selected: {{ selected }}</span>
</template>
<script>
   name:'...',
   data(){
     return{
        selected: 'A',
        options: [
           { text: 'One', value: 'A' },
           { text: 'Two', value: 'B' },
           { text: 'Three', value: 'C' }
        ]
     }
   }
</script>
说明：选择框中限制的值在我们点击的时候再span中展示的是我们在value上绑定的值

使用vue获取当前时间的值得方法
new Date().toLocaleString() ==》2019/10/14 上午10:57:15

3.这次总结的知识点非常重要对于vue的应用就更深了一个层次也就是实现组件间的传值，组件化的实现，使用vue的价值就在于组件化的实现，组件的独立性
和重用性，大大提高了我们的开发效率 节省好多代码 减少消耗内存，好了说了这么多废话下面进入正题
a.常用场景就是一个页面中有共同的样式，共同的样式还需要在多个页面用到，这时候就需要我们写一个公用的组件来实现，不然你就得每写一个页面就需要
写同样的样式，或许你可以拷贝过来但是你想过没有一两个页面可以拷贝 页面多呢是不是觉得时间浪费在这些拷贝代码上了，再比如ui图稍微一变 你是不是
又得挨个去找那个页面用到这个样式了，时间一长你那还记得之前在那个页面用到了 就算你记得 那你能记得所有的吗不能吧，所以组件化很重要
b.首先使用最多的就是父与子之间的传值了，拿一个index页面说事在index页面有不同的按钮 不同的按钮点击显示不同的弹出框，只是弹出框的内容不同罢了
这个时候如果我们把这些样式写在同一个人页面而且还用到的是定位实现会不会很乱 反正我之前有这么写过 当时后悔的不行到最后把自己都搞懵逼了，所以
我们把他单独提出去写成组件 在index页面哪里用到 我们就引用他
c.实现过程

